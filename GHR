#!/usr/bin/env node

require('dotenv').config()

const yaml = require('js-yaml')
const fs = require('fs')
const path = require('path')

const GitHub = require('./src/GitHub')
const Release = require('./src/Release')

const { GH_PERSONAL_TOKEN } = process.env
const GH = new GitHub(GH_PERSONAL_TOKEN)

const DRYRUN = process.argv.includes('-n', 2) || process.argv.includes('--dryrun', 2)
const ymlFiles = process.argv.filter(a => a.match(/(\.ya?ml)$/))
const releasesFile = ymlFiles.length > 0 ? ymlFiles[0] : './.releases.yml'
let releases = {}
try {
  releases = yaml.safeLoad(fs.readFileSync(path.join(__dirname, releasesFile), 'utf8'))
} catch (e) {
  console.error(e)
}

const getLatestRelease = async (org, repo) => {
  const lastRelease = await GH.getLatestRelease(org, repo)
  return lastRelease
}

const createRelease = async (org, repo, release) => {
  const newRelease = await GH.createRelease(org, repo, release)
    .then(r => console.info('✅ [CREATED]', `${org}/${repo}`, `${r.target_commitish}@${r.tag_name}`, r.name, r.body.split('\n')[0].length > 80 ? r.body.split('\n')[0].slice(80) : r.body.split('\n')[0]))
  return newRelease
}

(async () => {
  const promises = []

  for (const org in releases) {
    for (const repo in releases[org]) {
      const release = new Release(releases[org][repo]).info

      const latestRes = await getLatestRelease(org, repo)
      let shouldCreate = false
      if (latestRes.message === 'Not Found' || latestRes.tag_name !== release.tag_name || latestRes.name !== release.name || latestRes.target_commitish !== release.target_commitish) {
        shouldCreate = true
      }
      if (DRYRUN && shouldCreate) {
        promises.push(new Promise((resolve) => resolve()).then(() => console.info('✅ [CREATE ]', `${org}/${repo}`, `${release.target_commitish}@${release.tag_name}`, release.name, release.body.split('\n')[0].length > 80 ? release.body.split('\n')[0].slice(80) : release.body.split('\n')[0])))
      } else if (shouldCreate) {
        promises.push(createRelease(org, repo, release))
      } else {
        promises.push(new Promise((resolve) => resolve()).then(() => console.info('✅ [EXISTS ]', `${org}/${repo}`, `${latestRes.target_commitish}@${latestRes.tag_name}`, latestRes.name, latestRes.body.split('\n')[0].length > 80 ? latestRes.body.split('\n')[0].slice(80) : latestRes.body.split('\n')[0])))
      }
    }
  }

  Promise.all(promises).catch(e => console.error(e))
})()
